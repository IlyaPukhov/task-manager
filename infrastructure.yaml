services:
  db-user:
    image: postgres:16
    restart: unless-stopped
    volumes:
      - db-user-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  db-task:
    container_name: db-task-service
    image: postgres:16
    restart: unless-stopped
    volumes:
      - db-task-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  db-productivity:
    container_name: db-productivity-service
    image: mongo:8.0.0-rc13
    restart: unless-stopped
    volumes:
      - db-productivity-data:/data/db
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    restart: unless-stopped
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NODE_ID: 1
      CLUSTER_ID: r93l-jBYSguv4YLse9ytzw
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    command: start-dev --import-realm
    restart: unless-stopped
    volumes:
      - keycloak-config:/opt/keycloak/import
    healthcheck:
      test: [ "CMD-SHELL", "{ exec 3<>/dev/tcp/localhost/8080 && echo -e \"GET /health/ready HTTP/1.1\nhost: localhost:8080\n\" >&3 && timeout --preserve-status 1 cat <&3 | grep -m 1 -q 'status.*UP'; }" ]
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5

  victoria-metrics:
    image: victoriametrics/victoria-metrics:v1.101.0
    command: -promscrape.config=/etc/victoria-metrics/promscrape.yml
    restart: unless-stopped
    volumes:
      - victoria-metrics-config:/etc/victoria-metrics

  grafana:
    image: grafana/grafana:11.1.0
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    healthcheck:
      test: curl --fail -s http://localhost:3000/api/health || exit 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  grafana-loki:
    image: grafana/loki:3.0.0
    restart: unless-stopped

  grafana-tempo:
    image: grafana/tempo:2.5.0
    command: -config.file=/etc/grafana-tempo/tempo.yml
    restart: unless-stopped
    volumes:
      - grafana-tempo-config:/etc/grafana-tempo

volumes:
  db-user-data:
  db-task-data:
  db-productivity-data:
  grafana-data:
  kafka_data:
  keycloak-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/keycloak/import

  victoria-metrics-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/victoria-metrics

  grafana-tempo-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/tempo