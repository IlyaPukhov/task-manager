name: 'task-manager'

services:
  api-gateway:
    container_name: api-gateway
    image: ilyapukhov/api-gateway
    restart: unless-stopped
    ports:
      - '8080:8080'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1
    depends_on:
      - user-service
      - task-service
      - productivity-service
      - mail-service
      - eureka-server
      - config-server
      - auth-service

  auth-service:
    container_name: auth-service
    image: ilyapukhov/auth-service
    restart: unless-stopped
    ports:
      - '8084:8084'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8084/actuator/health || exit 1
    depends_on:
      - user-service
      - keycloak
      - kafka

  config-server:
    container_name: config-server
    image: ilyapukhov/config-server
    restart: unless-stopped
    ports:
      - '8888:8888'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8888/actuator/health || exit 1

  eureka-server:
    container_name: eureka-server
    image: ilyapukhov/eureka-server
    restart: unless-stopped
    ports:
      - '8761:8761'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8761/actuator/health || exit 1
    depends_on:
      - config-server

  mail-service:
    container_name: mail-service
    image: ilyapukhov/mail-service
    restart: unless-stopped
    ports:
      - '8090:8090'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8090/actuator/health || exit 1
    depends_on:
      - config-server
      - eureka-server
      - kafka

  productivity-service:
    container_name: productivity-service
    image: ilyapukhov/productivity-service
    restart: unless-stopped
    ports:
      - '8083:8083'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8083/actuator/health || exit 1
    depends_on:
      config-server:
        condition: service_started
      eureka-server:
        condition: service_started
      db-productivity:
        condition: service_healthy

  task-service:
    container_name: task-service
    image: ilyapukhov/task-service
    restart: unless-stopped
    ports:
      - '8082:8082'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8082/actuator/health || exit 1
    depends_on:
      config-server:
        condition: service_started
      eureka-server:
        condition: service_started
      db-task:
        condition: service_healthy

  user-service:
    container_name: user-service
    image: ilyapukhov/user-service
    restart: unless-stopped
    ports:
      - '8081:8081'
    env_file:
      - ./.env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1
    depends_on:
      config-server:
        condition: service_started
      eureka-server:
        condition: service_started
      task-service:
        condition: service_started
      db-user:
        condition: service_healthy

  # инфраструктура
  db-user:
    container_name: db-user-service
    image: postgres:16
    restart: unless-stopped
    networks:
      - task-manager
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB}
      POSTGRES_USER: ${USER_SERVICE_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_PASSWORD}
    ports:
      - '5433:5432'
    volumes:
      - db-user-service-data:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB

  db-task:
    container_name: db-task-service
    image: postgres:16
    restart: unless-stopped
    networks:
      - task-manager
    environment:
      POSTGRES_DB: ${TASK_SERVICE_DB}
      POSTGRES_USER: ${TASK_SERVICE_USER}
      POSTGRES_PASSWORD: ${TASK_SERVICE_PASSWORD}
    ports:
      - '5434:5432'
    volumes:
      - db-task-service-data:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB

  db-productivity:
    container_name: db-productivity-service
    image: mongo:8.0.0-rc13
    restart: unless-stopped
    networks:
      - task-manager
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${PRODUCTIVITY_SERVICE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${PRODUCTIVITY_SERVICE_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - db-productivity-service-data:/data/db
    env_file:
      - ./.env
    healthcheck:
      test: mongosh --eval db.adminCommand 'ping'

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.6.1
    restart: unless-stopped
    networks:
      - task-manager
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.6.1
    restart: unless-stopped
    networks:
      - task-manager
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.2
    command: start-dev --import-realm
    restart: unless-stopped
    networks:
      - task-manager
    ports:
      - '18080:8080'
    volumes:
      - keycloak-config:/opt/keycloak/import
    env_file:
      - ./.env

  victoria-metrics:
    container_name: victoria-metrics
    image: victoriametrics/victoria-metrics:v1.101.0
    command: -promscrape.config=/etc/victoria-metrics/promscrape.yml
    restart: unless-stopped
    networks:
      - task-manager
    ports:
      - '8428:8428'
    volumes:
      - victoria-metrics-config:/etc/victoria-metrics

  grafana:
    container_name: grafana
    image: grafana/grafana:11.1.0
    restart: unless-stopped
    networks:
      - task-manager
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
    env_file:
      - ./.env

  grafana-loki:
    container_name: grafana-loki
    image: grafana/loki:3.0.0
    restart: unless-stopped
    networks:
      - task-manager
    ports:
      - '3100:3100'

  grafana-tempo-tracing:
    container_name: grafana-tempo
    image: grafana/tempo:2.5.0
    command: -config.file=/etc/grafana-tempo/tempo.yml
    restart: unless-stopped
    networks:
      - task-manager
    ports:
      - '3200:3200'
      - '9411:9411' #zipkin
    volumes:
      - grafana-tempo-config:/etc/grafana-tempo

networks:
  task-manager:
    name: 'task-manager'
    driver: bridge

volumes:
  db-user-service-data:
  db-task-service-data:
  db-productivity-service-data:
  grafana-data:
  keycloak-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/keycloak/import

  victoria-metrics-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/victoria-metrics

  grafana-tempo-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/tempo
